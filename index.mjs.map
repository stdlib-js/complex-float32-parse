{"version":3,"file":"index.mjs","sources":["../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { isPrimitive as isString } from '@stdlib/assert-is-string';\nimport Complex64 from '@stdlib/complex-float32-ctor';\nimport replace from '@stdlib/string-base-replace';\nimport format from '@stdlib/error-tools-fmtprodmsg';\n\n\n// FUNCTIONS //\n\n/**\n* Matches a complex number string.\n*\n* @private\n* @returns {RegExp} regular expression\n*\n* @example\n* var re = regexp();\n* // returns /^([-+]?(\\d*\\.?\\d*(?:[eE][-+]?\\d+)?|Infinity|NaN)i?)?([-+])?((\\d*\\.?\\d*(?:[eE][-+]?\\d+)?|Infinity|NaN)i)?$/\n*/\nfunction regexp() {\n\treturn /^([-+]?(\\d*\\.?\\d*(?:[eE][-+]?\\d+)?|Infinity|NaN)i?)?([-+])?((\\d*\\.?\\d*(?:[eE][-+]?\\d+)?|Infinity|NaN)i)?$/;\n}\n\n\n// MAIN //\n\n/**\n* Parse a string representation of a complex number and returns a Complex64 instance.\n*\n* @param {string} str - string representation of a complex number\n* @throws {TypeError} must provide a string\n* @throws {Error} must provide a valid string representation of a complex number\n* @returns {Complex64} 64-bit complex number\n*\n* @example\n* var str = '1 + 2i';\n* var z = parseComplex64( str );\n* // returns <Complex64>\n*/\nfunction parseComplex64( str ) {\n\tvar match;\n\tvar re;\n\tvar im = 0;\n\n\tif ( !isString( str ) ) {\n\t\tthrow new TypeError( format( 'null3F', str ) );\n\t}\n\n\tmatch = replace( str, /\\s/g, '' ).match( regexp() );\n\tif ( !match ) {\n\t\tthrow new Error( format( 'invalid argument. Unable to parse input string as a complex number. Value: `%s`.', str ) );\n\t}\n\n\t// Real part:\n\tre = ( match[1] && !match[1].endsWith( 'i' ) ) ? parseFloat( match[1] ) : 0;\n\n\t// Imaginary part:\n\tif ( match[4] ) {\n\t\tim = ( ( match[3] === '-' ) ? -1 : 1 ) * parseFloat( replace( match[4], /i$/, '' ) );\n\t} else if ( match[1] && match[1].endsWith( 'i' ) ) {\n\t\tim = parseFloat( replace( match[1], /i$/, '' ) );\n\t}\n\treturn new Complex64( re, im );\n}\n\n\n// EXPORTS //\n\nexport default parseComplex64;\n"],"names":["parseComplex64","str","match","re","im","isString","TypeError","format","replace","Error","endsWith","parseFloat","Complex64"],"mappings":";;iYA4DA,SAASA,EAAgBC,GACxB,IAAIC,EACAC,EACAC,EAAK,EAET,IAAMC,EAAUJ,GACf,MAAM,IAAIK,UAAWC,EAAQ,SAAUN,IAIxC,KADAC,EAAQM,EAASP,EAAK,MAAO,IAAKC,MA5B3B,8GA8BN,MAAM,IAAIO,MAAOF,EAAQ,mFAAoFN,IAY9G,OARAE,EAAOD,EAAM,KAAOA,EAAM,GAAGQ,SAAU,KAAUC,WAAYT,EAAM,IAAO,EAGrEA,EAAM,GACVE,GAAsB,MAAbF,EAAM,IAAgB,EAAI,GAAMS,WAAYH,EAASN,EAAM,GAAI,KAAM,KACnEA,EAAM,IAAMA,EAAM,GAAGQ,SAAU,OAC1CN,EAAKO,WAAYH,EAASN,EAAM,GAAI,KAAM,MAEpC,IAAIU,EAAWT,EAAIC,EAC3B"}